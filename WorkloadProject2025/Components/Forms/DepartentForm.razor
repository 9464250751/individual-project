@using System.ComponentModel.DataAnnotations
@using WorkloadProject2025.Data.Models
@inject SchoolService schoolService
@inject DepartmentService DepartmentService

<MudCard Class="mx-auto mt-6" Style="max-width: 450px;">
    <MudCardHeader>
        <MudText Typo="Typo.h6" Class="font-semibold">Add New Department</MudText>
    </MudCardHeader>

    <MudCardContent>
        <MudStack Spacing="2">

            <MudTextField Label="Department Name"
                          @bind-Value="department.Name"
                          Required="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Business" />

            <MudSelect T="int"
                       @bind-value="department.SchoolId"
                       Required="true">
                @foreach (var school in Schools)
                {
                    <MudSelectItem Value="@school.Id">@school.Name</MudSelectItem>
                }

            </MudSelect>


        </MudStack>
    </MudCardContent>

    <MudCardActions Class="justify-end">
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Save</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public EventCallback<Department> OnSaved { get; set; }

    private Department department { get; set; } = new Department();
    // Replace the service injection and loading with a parameter
    [Parameter]
    public List<School> Schools { get; set; }
    


    private void Cancel()
    {
        department = new Department(); // reset form
    }

    private async void Save()
    {
        await DepartmentService.AddAsync(department);
        await OnSaved.InvokeAsync();
        Cancel();
    }
}
