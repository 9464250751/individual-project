@page "/faculty-workload-dashboard"
@using WorkloadProject2025.Data.Models
@using WorkloadProject2025.Services
@inject IFacultyWorkloadService WorkloadService
@inject IFacultyService FacultyService
@inject IDepartmentService DepartmentService

<PageTitle>Faculty Workload Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-2" /> Faculty Workload Dashboard
    </MudText>

    <!-- Summary Statistics Panel -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Color="Color.Primary">Total Faculty</MudText>
                <MudText Typo="Typo.h3">@totalFaculty</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Color="Color.Secondary">Avg Workload Hours</MudText>
                <MudText Typo="Typo.h3">@averageWorkloadHours.ToString("F1")</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Color="Color.Tertiary">Avg Students/Faculty</MudText>
                <MudText Typo="Typo.h3">@averageStudentsPerFaculty.ToString("F0")</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Color="Color.Success">Total Courses</MudText>
                <MudText Typo="Typo.h3">@totalCourses</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Filters -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h6" Class="mb-2">Filters</MudText>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudSelect @bind-Value="selectedDepartment" Label="Department" Variant="Variant.Outlined" Dense="true" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("All")">All Departments</MudSelectItem>
                    @foreach (var dept in departments)
                    {
                        <MudSelectItem Value="@(dept.Name)">@dept.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect @bind-Value="selectedPosition" Label="Position" Variant="Variant.Outlined" Dense="true" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("All")">All Positions</MudSelectItem>
                    <MudSelectItem Value="@("Professor")">Professor</MudSelectItem>
                    <MudSelectItem Value="@("Associate Professor")">Associate Professor</MudSelectItem>
                    <MudSelectItem Value="@("Assistant Professor")">Assistant Professor</MudSelectItem>
                    <MudSelectItem Value="@("Lecturer")">Lecturer</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect @bind-Value="selectedSemester" Label="Semester" Variant="Variant.Outlined" Dense="true" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Fall 2024")">Fall 2024</MudSelectItem>
                    <MudSelectItem Value="@("Spring 2024")">Spring 2024</MudSelectItem>
                    <MudSelectItem Value="@("Fall 2023")">Fall 2023</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Main Content with Side Panel -->
    <MudGrid>
        <MudItem xs="12" md="@(selectedFaculty != null ? 8 : 12)">
            <!-- Faculty Workload Table -->
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Faculty Workload Details</MudText>
                <MudTable Items="@filteredWorkloadData" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" 
                          OnRowClick="@OnFacultyRowClick" T="FacultyWorkloadViewModel" Style="cursor: pointer;">
                    <HeaderContent>
                        <MudTh>Faculty Name</MudTh>
                        <MudTh>Department</MudTh>
                        <MudTh>Position</MudTh>
                        <MudTh>Total Courses</MudTh>
                        <MudTh>Workload (hrs/wk)</MudTh>
                        <MudTh>Total Students</MudTh>
                        <MudTh>Contact</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Faculty Name">@context.FacultyName</MudTd>
                        <MudTd DataLabel="Department">@context.Department</MudTd>
                        <MudTd DataLabel="Position">@context.Position</MudTd>
                        <MudTd DataLabel="Total Courses">@context.TotalCourses</MudTd>
                        <MudTd DataLabel="Workload">
                            <MudChip T="string" Size="Size.Small" Color="@GetWorkloadColor(context.TotalWorkloadHours)">
                                @context.TotalWorkloadHours.ToString("F1")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Total Students">@context.TotalStudents</MudTd>
                        <MudTd DataLabel="Contact">
                            <MudTooltip Text="@context.Email">
                                <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="@context.Phone">
                                <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="ml-2" />
                            </MudTooltip>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Teaching Schedule Side Panel -->
        @if (selectedFaculty != null)
        {
            <MudItem xs="12" md="4">
                <MudPaper Elevation="4" Class="pa-4" Style="position: sticky; top: 20px;">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        Teaching Schedule
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(() => selectedFaculty = null)" Class="float-right" />
                    </MudText>
                    <MudDivider Class="mb-3" />
                    
                    <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@selectedFaculty.FacultyName</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@selectedFaculty.Position</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">@selectedFaculty.Department</MudText>
                    
                    <MudDivider Class="mb-3" />
                    
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Course Schedule</MudText>
                    @foreach (var course in selectedFaculty.Courses)
                    {
                        <MudCard Class="mb-2" Elevation="1">
                            <MudCardContent Class="pa-2">
                                <MudText Typo="Typo.body2" Class="font-weight-bold">@course.CourseName</MudText>
                                <MudText Typo="Typo.caption">@course.DeliveryType - @course.Hours hrs/week</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Students: @course.Students</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                    
                    <MudDivider Class="my-3" />
                    
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Contact Information</MudText>
                    <MudText Typo="Typo.body2">
                        <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" Class="mr-1" />
                        @selectedFaculty.Email
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1" />
                        @selectedFaculty.Phone
                    </MudText>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <!-- Analytics Section -->
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="6">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Current vs Last Semester Workload</MudText>
                <MudChart ChartType="ChartType.Bar" 
                          ChartSeries="@semesterComparisonSeries" 
                          XAxisLabels="@semesterComparisonLabels" 
                          Width="100%" Height="350px" 
                          ChartOptions="@barChartOptions" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Workload Trend by Faculty</MudText>
                <MudChart ChartType="ChartType.Line" 
                          ChartSeries="@workloadTrendSeries" 
                          XAxisLabels="@trendLabels" 
                          Width="100%" Height="350px"
                          ChartOptions="@lineChartOptions" />
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <MudItem xs="12">
            <MudPaper Elevation="4" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Department-wise Workload Comparison</MudText>
                <MudChart ChartType="ChartType.Bar" 
                          ChartSeries="@departmentComparisonSeries" 
                          XAxisLabels="@departmentLabels" 
                          Width="100%" Height="350px"
                          ChartOptions="@barChartOptions" />
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Faculty> allFaculty = new();
    private List<FacultyWorkload> allWorkloads = new();
    private List<Department> departments = new();
    private List<FacultyWorkloadViewModel> workloadData = new();
    private List<FacultyWorkloadViewModel> filteredWorkloadData = new();
    
    private FacultyWorkloadViewModel? selectedFaculty = null;
    
    // Filters
    private string selectedDepartment = "All";
    private string selectedPosition = "All";
    private string selectedSemester = "Fall 2024";
    
    // Summary statistics
    private int totalFaculty = 0;
    private double averageWorkloadHours = 0;
    private double averageStudentsPerFaculty = 0;
    private int totalCourses = 0;
    
    // Chart data
    private List<ChartSeries> semesterComparisonSeries = new();
    private string[] semesterComparisonLabels = Array.Empty<string>();
    
    private List<ChartSeries> workloadTrendSeries = new();
    private string[] trendLabels = Array.Empty<string>();
    
    private List<ChartSeries> departmentComparisonSeries = new();
    private string[] departmentLabels = Array.Empty<string>();
    
    private ChartOptions barChartOptions = new ChartOptions { YAxisTicks = 5 };
    private ChartOptions lineChartOptions = new ChartOptions { YAxisTicks = 5, LineStrokeWidth = 3 };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        GenerateSampleData();
        ProcessWorkloadData();
        ApplyFilters();
        CalculateStatistics();
        GenerateChartData();
    }

    private async Task LoadData()
    {
        allFaculty = await FacultyService.GetAllAsync();
        allWorkloads = await WorkloadService.GetAllAsync();
        departments = await DepartmentService.GetAllAsync();
    }

    private void GenerateSampleData()
    {
        // Generate sample data if database is empty
        if (!allFaculty.Any())
        {
            allFaculty = new List<Faculty>
            {
                new Faculty { Email = "john.smith@university.edu", FirstName = "John", LastName = "Smith", PhoneNumber = "555-0101", Position = "Professor", DepartmentId = null },
                new Faculty { Email = "jane.doe@university.edu", FirstName = "Jane", LastName = "Doe", PhoneNumber = "555-0102", Position = "Associate Professor", DepartmentId = null },
                new Faculty { Email = "bob.johnson@university.edu", FirstName = "Bob", LastName = "Johnson", PhoneNumber = "555-0103", Position = "Assistant Professor", DepartmentId = null },
                new Faculty { Email = "alice.williams@university.edu", FirstName = "Alice", LastName = "Williams", PhoneNumber = "555-0104", Position = "Lecturer", DepartmentId = null },
                new Faculty { Email = "charlie.brown@university.edu", FirstName = "Charlie", LastName = "Brown", PhoneNumber = "555-0105", Position = "Professor", DepartmentId = null },
            };
        }

        if (!departments.Any())
        {
            departments = new List<Department>
            {
                new Department { Id = 1, Name = "Computer Science", SchoolId = 1 },
                new Department { Id = 2, Name = "Mathematics", SchoolId = 1 },
                new Department { Id = 3, Name = "Business", SchoolId = 2 },
            };
        }

        // Generate workload data
        if (!allWorkloads.Any())
        {
            var random = new Random();
            allWorkloads = new List<FacultyWorkload>();
            
            foreach (var faculty in allFaculty.Take(5))
            {
                var numCourses = random.Next(2, 5);
                for (int i = 0; i < numCourses; i++)
                {
                    allWorkloads.Add(new FacultyWorkload
                    {
                        FacultyEmail = faculty.Email,
                        Type = WorkloadType.course,
                        DeliveryType = i % 2 == 0 ? "Lecture" : "Lab",
                        HoursPerWeek = random.Next(3, 6),
                        TotalStudents = random.Next(20, 80),
                        Semester = "Fall 2024",
                        Year = 2024
                    });
                }
            }
        }
    }

    private void ProcessWorkloadData()
    {
        var facultyGroups = allWorkloads.GroupBy(w => w.FacultyEmail);
        
        workloadData = new List<FacultyWorkloadViewModel>();
        
        foreach (var group in facultyGroups)
        {
            var faculty = allFaculty.FirstOrDefault(f => f.Email == group.Key);
            if (faculty == null) continue;
            
            var workloads = group.Where(w => w.Semester == selectedSemester).ToList();
            var courseWorkloads = workloads.Where(w => w.Type == WorkloadType.course).ToList();
            
            var viewModel = new FacultyWorkloadViewModel
            {
                Email = faculty.Email,
                FacultyName = $"{faculty.FirstName} {faculty.LastName}",
                Department = faculty.Department?.Name ?? departments.FirstOrDefault()?.Name ?? "Computer Science",
                Position = faculty.Position ?? "Professor",
                Phone = faculty.PhoneNumber,
                TotalCourses = courseWorkloads.Count,
                TotalWorkloadHours = (double)(courseWorkloads.Sum(w => w.HoursPerWeek) ?? 0),
                TotalStudents = courseWorkloads.Sum(w => w.TotalStudents ?? 0),
                Courses = courseWorkloads.Select(w => new CourseScheduleItem
                {
                    CourseName = w.Course?.Name ?? $"Course {w.Id}",
                    DeliveryType = w.DeliveryType ?? "Lecture",
                    Hours = (double)(w.HoursPerWeek ?? 0),
                    Students = w.TotalStudents ?? 0
                }).ToList()
            };
            
            workloadData.Add(viewModel);
        }
    }

    private void ApplyFilters()
    {
        filteredWorkloadData = workloadData.Where(w =>
            (selectedDepartment == "All" || w.Department == selectedDepartment) &&
            (selectedPosition == "All" || w.Position == selectedPosition)
        ).ToList();
    }

    private void CalculateStatistics()
    {
        totalFaculty = filteredWorkloadData.Count;
        averageWorkloadHours = filteredWorkloadData.Any() ? filteredWorkloadData.Average(w => w.TotalWorkloadHours) : 0;
        averageStudentsPerFaculty = filteredWorkloadData.Any() ? filteredWorkloadData.Average(w => w.TotalStudents) : 0;
        totalCourses = filteredWorkloadData.Sum(w => w.TotalCourses);
    }

    private void GenerateChartData()
    {
        // Semester Comparison Chart
        var currentSemester = filteredWorkloadData.Take(5).Select(f => f.TotalWorkloadHours).ToArray();
        var lastSemester = filteredWorkloadData.Take(5).Select(f => f.TotalWorkloadHours * 0.85).ToArray(); // Simulated last semester
        
        semesterComparisonSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Current Semester (Fall 2024)", Data = currentSemester.Select(x => (double)x).ToArray() },
            new ChartSeries { Name = "Last Semester (Spring 2024)", Data = lastSemester }
        };
        semesterComparisonLabels = filteredWorkloadData.Take(5).Select(f => f.FacultyName.Split(' ')[1]).ToArray();
        
        // Workload Trend Chart
        workloadTrendSeries = new List<ChartSeries>();
        var topFaculty = filteredWorkloadData.Take(3).ToList();
        foreach (var faculty in topFaculty)
        {
            var trend = new double[] { faculty.TotalWorkloadHours * 0.7, faculty.TotalWorkloadHours * 0.8, faculty.TotalWorkloadHours * 0.9, faculty.TotalWorkloadHours };
            workloadTrendSeries.Add(new ChartSeries { Name = faculty.FacultyName, Data = trend });
        }
        trendLabels = new[] { "Fall 2023", "Spring 2024", "Summer 2024", "Fall 2024" };
        
        // Department Comparison Chart
        var deptGroups = filteredWorkloadData.GroupBy(w => w.Department);
        var deptWorkloads = deptGroups.Select(g => g.Average(w => w.TotalWorkloadHours)).ToArray();
        
        departmentComparisonSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Average Workload Hours", Data = deptWorkloads }
        };
        departmentLabels = deptGroups.Select(g => g.Key).ToArray();
    }

    private void OnFacultyRowClick(TableRowClickEventArgs<FacultyWorkloadViewModel> args)
    {
        selectedFaculty = args.Item;
        StateHasChanged();
    }

    private Color GetWorkloadColor(double hours)
    {
        if (hours > 15) return Color.Error;
        if (hours > 10) return Color.Warning;
        return Color.Success;
    }

    protected override void OnParametersSet()
    {
        ApplyFilters();
        CalculateStatistics();
        GenerateChartData();
    }

    // View Models
    public class FacultyWorkloadViewModel
    {
        public string Email { get; set; } = "";
        public string FacultyName { get; set; } = "";
        public string Department { get; set; } = "";
        public string Position { get; set; } = "";
        public string Phone { get; set; } = "";
        public int TotalCourses { get; set; }
        public double TotalWorkloadHours { get; set; }
        public int TotalStudents { get; set; }
        public List<CourseScheduleItem> Courses { get; set; } = new();
    }

    public class CourseScheduleItem
    {
        public string CourseName { get; set; } = "";
        public string DeliveryType { get; set; } = "";
        public double Hours { get; set; }
        public int Students { get; set; }
    }
}
